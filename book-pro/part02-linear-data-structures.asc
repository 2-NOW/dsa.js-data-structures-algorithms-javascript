[[chapter-2]]
[[part02-linear-data-structures]]
== Linear Data Structures

Data Structures comes in many flavors. There’s no one to rule them all. You have to know the tradeoffs so you can choose the right one for the job.

Even though in your day-to-day, you might not need to re-implementing them, knowing how they work internally would help you how when to use over the other or even tweak them to create a new one. We are going to explore the most common data structures time and space complexity.

.In this part we are going to learn about the following linear data structures:
- <<Array>>
- <<Linked List>>
- <<Stack>>
- <<Queue>>

Later, in the next part, we are going to explore non-linear data structures like <<Graph, Graphs>> and <<Tree, Trees>>.

ifdef::backend-html5[]
If you want to have a general overview of each one, take a look at the following interactive diagram:
+++
<iframe
  src="https://embed.kumu.io/85f1a4de5fb8430a10a1bf9c5118e015"
  width="940" height="600" frameborder="0"></iframe>
+++
endif::[]


include::content/part02/array.asc[]

include::content/part02/linked-list.asc[]

include::content/part02/stack.asc[]

include::content/part02/queue.asc[]


=== Array vs. Linked List & Queue vs. Stack

In this part of the book, we explored the most used linear data structures such as Arrays, Linked Lists, Stacks and Queues. We implemented them and discussed the runtime of their operations.

.Use Arrays when…
* You need to access data in random order fast (using an index).
* Your data is multi-dimensional (e.g., matrix, tensor).

.Use Linked Lists when:
* You will access your data sequentially.
* You want to save memory and only allocate memory as you need it.
* You want constant time to remove/add from extremes of the list.

.Use a Queue when:
* You need to access your data in a first-come, first served basis (FIFO).
* You need to implement a <<Breadth-First Search for Binary Tree, Breadth-First Search>>

.Use a Stack when:
* You need to access your data as last-in, first-out (LIFO).
* You need to implement a <<Depth-First Search for Binary Tree, Depth-First Search>>
(((Tables, Linear DS, Array/Lists/Stack/Queue complexities)))

// tag::table[]
.Time/Space Complexity of Linear Data Structures (Array, LinkedList, Stack & Queues)
|===
.2+.^s| Data Structure 2+^s| Searching By 3+^s| Inserting at the 3+^s| Deleting from .2+.^s| Space
^|_Index/Key_ ^|_Value_ ^|_beginning_ ^|_middle_ ^|_end_ ^|_beginning_ ^|_middle_ ^|_end_
| <<Array>> ^|O(1) ^|O(n) ^|O(n) ^|O(n) ^|O(1) ^|O(n) ^|O(n) ^|O(1) ^|O(n)
| <<Singly Linked List>> ^|O(n) ^|O(n) ^|O(1) ^|O(n) ^|O(1) ^|O(1) ^|O(n) ^|*O(n)* ^|O(n)
| <<Doubly Linked List>> ^|O(n) ^|O(n) ^|O(1) ^|O(n) ^|O(1) ^|O(1) ^|O(n) ^|*O(1)* ^|O(n)
| <<Stack>> ^|- ^|- ^|- ^|- ^|O(1) ^|- ^|- ^|O(1) ^|O(n)
| Queue (w/array) ^|- ^|- ^|- ^|- ^|*O(n)* ^|- ^|- ^|O(1) ^|O(n)
| <<Queue>> (w/list) ^|- ^|- ^|- ^|- ^|O(1) ^|- ^|- ^|O(1) ^|O(n)
|===
// end::table[]
